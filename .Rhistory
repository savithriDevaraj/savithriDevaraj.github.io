x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
library(manipulate)
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
#manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
library(galton)
install.packages("UsingR")
library(manipulate)
library(UsingR)
data(galton)
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
#manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
library(ggplot2)
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x*w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
cor(y,x)*sd(y)/sd(x)
data(mtcars)
head(mtcars)
cor(mtcars$mpg,mtcars$wt)*sd(mtcars$mpg)/sd(mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
8.58-9.31
normalize.vector(x)
scale(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
mean(y)
b1 <- cor(y,x)*sd(y)/sd(x)
mean(y)-b1*mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
library(swirl)
swirl()
fit <- lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
exit
quit
0
quit()
data(mtcars)
head(mtcars)
fit <- lm(mpg~cyl, data=mtcars)
summary(fit)
fit <- lm(mpg~cyl+wt, data=mtcars)
summary(fit)
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)
head(mtcars)
factor(mtcars$cyl)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl) + wt + interaction(cyl, wt), data = mtcars)
# To compare model we usually use an anova table
# anova null hypothesis says that both models are the same.
compare <- anova(fit1, fit2)
compare$Pr
?anova
?lrtest
library(lmtest)
suppressMessages(library(lmtest))
fit_non_interaction <- lm(mpg ~ cyl + wt, mtcars)
summary(fit_non_interaction)$adj.r.squared
fit_interaction <- lm(mpg ~ cyl + wt + cyl:wt, mtcars)
summary(fit_interaction)$adj.r.squared
lrtest(fit_interaction, fit_non_interaction)
install.packages("lmtest")
library(lmtest)
lrtest(fit1,fit2)
?lrtest
mtcars$cyl<- factor(mtcars$cyl)
fit1<- lm(mpg~cyl+wt,mtcars)
fit2<- lm(mpg~cyl+wt+cyl:wt,mtcars)
lrtest(fit1,fit2)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
?hat
fit <- lm(y~x)
hat(x,intercept=TRUE)
summary(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
summary(fit)
hat(x,intercept=true)
hat(x,intercept=TRUE)
influence.measures(fit)$infmat[5, 'dfb.x']
?influence.measures
data(mtcars)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
lm(mpg ~ wt + factor(cyl), data = mtcars)
summary(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Auto','Manual'))
summary(mtcars)
?step
fit <- lm(mpg~am, data=mtcars)
summary(fit)
newFit <- lm(mpg~., data=mtcars)
summary(newFit)
newFit <- lm(mpg~am+wt+cyl+hp, data=mtcars)
summary(newFit)
library(swirl)
swirl()
fit <- lm(child~parent,data=galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <-fit$coef[1]
ols.slope <-fit$coef[2]
lhs - rhs
all.equal(lhs,rhs)
varchild <- var(lhs)
varchild <- var(galton$child)
"varChild <- var(galton$child)"
varchild <- var(galton$child)
info()
skip()
varres <- var(fit$residuals)
varRes <- var(fit$residuals)
varEst <- est(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varRes, varEst)
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(fit$residuals, attenu$mag)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
fit <- lm(child~parent, data=galton)
sqrt(sum(fit$residuals)
))
skip()
summary(fit)$sigma"
""
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum(galton$child^2)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit$residuals)
sRes <- deviance(fit$residuals^2)
skir()
skip()
1 - (sRes/sTot)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
swirl
swirl()
library(swirl)
swirl()
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, sum(varRes,varEst))
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
ones <- rep(1, nrow(galton))
lm(child~ones+parent-1, galton)
lm(child~parent, galton)
lm(child~1, galton)
View(trees)
fit <- lm(volume~Girth+Height+Constant-1, trees)
fit <- lm(volume ~ Girth + Height + Constant -1, trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lappy(list(fit, fit2), coef)
library(dplyr)
lapply(list(fit, fit2), coef)
all <- lm(Fertility~., swiss)
summary(all)
lm(Fertility~Agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination, Education, swiss)
cor(swiss$Education, swiss$Examination)
cor(swiss$Education, swiss$Agriculture)
makelm()
makelms <- function(){
# Store the coefficient of linear models with different independent variables
cf <- c(coef(lm(Fertility ~ Agriculture, swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic,swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic + Education,swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic + Education + Examination,swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic + Education + Examination +Infant.Mortality, swiss))[2])
print(cf)
}
makelms()
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility~.+ec, swiss)
all$coef - efit$coef
all$coefficients-efit$coefficients
data(insectSprays)
library(insectSprays)
library(datasets)
View(InsectSprays)
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
sF
summary(InsectSprays[,2])
sapply(InsectSprays[],str)
sapply(InsectSprays,class)
fit <- lm(count~spray, InsectSprays)
summary(fit$coef)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray -1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray,spray2)
spray2 <- relevel(InsectSprays$spray,sprayC)
spray2 <- relevel(InsectSprays$spray,C)
spray2 <- relevel(InsectSprays$spray,'C')
fit2 <- lm(count~spray, spray2)
fit2 <- lm(count~spray, spray2)
View(spray2)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sc)
mean(sC)
fit$coef[2]-fit$coef[3]
fit$coef[2]-fit$coef[3]/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger[,2])
names(hunger)
fit <- lm(Numeric~Year, hunger)
summary(fit)$coef
lmf <- lm(Numeric[hunger$Sex=="Female"]~Years[hunger$Sex=="Female"], hunger)
lmf <- lm(hunger[hunger$Sex=="Female"]~Years[hunger$Sex=="Female"], hunger)
skip()
lmF <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmBoth <- lm(hunger$Numeric~hunger$Years+hunger$Sex)
View(hunger)
lmBoth <- lm(Numeric ~ Year+Sex,hunger)
summary(lmBoth)
lmInter <- lm(Numeric~Year+Sex+Sex*Year, hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y~x, out2[-1,])
plot(fitno, which=1)
coef(fit) - coef(fitno)
View(dfbeta(fit))
info()
main()
library(swirl)
swirl()
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility~Agriculture, swiss)
fit3 <- lm(Fertility~Agriculture+Examination+Education, swiss)
anova(fit1,fit3)
deviance(fit3)
d <- deviance(fit3)/43
(deviance(fit1)-deviance(fit3))/2
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits ~ date + log(visits+1), poisson, hits))
mdl2 <- glm(visits ~ date + log(visits+1), poisson, hits)
mdl2 <- glm(formula = simplystats ~ date, family = poisson,
| data = hits, offset = log(visits + 1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson,data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y <- factor(vowel.train$y)
str(vowel.train)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
modFit <- train(y~ .,data=training,method="rf",prox=TRUE)
library(caret)
modFit <- train(y~ .,data=training,method="rf",prox=TRUE)
modFit <- train(y~ .,data=vowel.train,method="rf",prox=TRUE)
modFit2 <- train(y ~ ., method="gbm",data=vowel.train,verbose=FALSE)
pred1 <- predict(modFit,vowel.test); pred2 <- predict(modFit2,vowel.test)
pred1
predDF <- data.frame(pred1,pred2,y=vowel.test$y)
combModFit <- train(y ~.,method="gam",data=predDF)
combPred <- predict(combModFit,predDF)
sqrt(sum((pred1-vowel.test$y)^2))
confusionMatrix(vowel.test$y, pred1)$overall['Accuracy']
confusionMatrix(vowel.test$y, pred2)$overall['Accuracy']
idx_agreed <- (pred1 == pred2)
confusionMatrix(vowel.test$y[idx_agreed], pred1[idx_agreed])$overall['Accuracy']
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
str(training)
modFit <- train(diagnosis~ .,data=training,method="rf",prox=TRUE)
gbmmodel <- suppressMessages(train(diagnosis~., data=training, method="gbm"))
ldamodel <- suppressMessages(train(diagnosis~., data=training, method="lda"))
rfresult <- predict(modFit, testing)
gbmresult <- predict(gbmmodel, testing)
ldaresult <- predict(ldamodel, testing)
combined.data <- data.frame(rfresult, gbmresult, ldaresult, diagnosis=testing$diagnosis)
combined.model <- train(diagnosis~., data=combined.data, method="rf")
combined.result <- predict(combined.model, testing)
confusionMatrix(testing$diagnosis, rfresult)$overall['Accuracy']
confusionMatrix(testing$diagnosis, gbmresult)$overall['Accuracy']
confusionMatrix(testing$diagnosis, ldaresult)$overall['Accuracy']
confusionMatrix(testing$diagnosis, combined.result)$overall['Accuracy']
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
?plot.enet
?lasso
?caret.lasso
lasso.model <- train(CompressiveStrength~., data=training, method="lasso")
plot.enet(lasso.model$finalModel, xvar="penalty", use.color=TRUE)
?plot.enet
lasso.model$finalModel
library(forecast)
library(quantmod)
library(lubridate)  # For year() function below
dat = read.csv("~/datasciencecoursera/Courses/PracticalMachineLearning/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
library(forecast)
library(quantmod)
library(lubridate)  # For year() function below
dat = read.csv("~/datasciencecoursera/Courses/PracticalMachineLearning/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
dat = read.csv("C:/Users/Anna/Downloads/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
?bals
?bats
mod <- bats(tstrain)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
suppressMessages(library(caret))
set.seed(33833)
rfmodel <- suppressMessages(train(y~., data=vowel.train, method="rf"))
gbmmodel <- suppressMessages(train(y~., data=vowel.train, method="gbm"))
rf.result <- predict(rfmodel, vowel.test)
gbm.result <- predict(gbmmodel, vowel.test)
confusionMatrix(vowel.test$y, rf.result)$overall['Accuracy']
confusionMatrix(vowel.test$y, gbm.result)$overall['Accuracy']
idx_agreed <- (rf.result == gbm.result)
confusionMatrix(vowel.test$y[idx_agreed], rf.result[idx_agreed])$overall['Accuracy']
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfmodel <- suppressMessages(train(diagnosis~., data=training, method="rf"))
gbmmodel <- suppressMessages(train(diagnosis~., data=training, method="gbm"))
ldamodel <- suppressMessages(train(diagnosis~., data=training, method="lda"))
rfresult <- predict(rfmodel, testing)
gbmresult <- predict(gbmmodel, testing)
ldaresult <- predict(ldamodel, testing)
combined.data <- data.frame(rfresult, gbmresult, ldaresult, diagnosis=testing$diagnosis)
combined.model <- train(diagnosis~., data=combined.data, method="rf")
combined.result <- predict(combined.model, testing)
confusionMatrix(testing$diagnosis, rfresult)$overall['Accuracy']
confusionMatrix(testing$diagnosis, gbmresult)$overall['Accuracy']
confusionMatrix(testing$diagnosis, ldaresult)$overall['Accuracy']
confusionMatrix(testing$diagnosis, combined.result)$overall['Accuracy']
getwd()
setwd(C:/Users/Anna/DataProducts/")
setwd("C:/Users/Anna/DataProducts/")
library(devtools)
runApp()
library(slidify)
runApp()
library(shiny)
runApp()
devtools::install_github('rstudio/shinyapps')
install.packages("RCurl")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='savithridevaraj', token='E811483E8382D35BC00D0B01DF5A592E', secret='60USiHw8ld5o0I9U5X7qUFPRMck8vTCaYQVWfFor')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
library(shinyapps)
shinyapps::deployApp('C:/Users/Anna/DataProducts/')
library(shinyapps)
shinyapps::deployApp('C:/Users/Anna/DataProducts')
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
setwd('./slidifyPresentation')
slidify("index.Rmd")
BrowseURL("index.html")
browseURL("index.html")
publish(user = "savithriDevaraj", repo = "https://github.com/savithriDevaraj/DataProducts/tree/master/slidifyPresentation")
publish(user = "savithriDevaraj", repo = "http://savithriDevaraj.github.io")
publish(user = "savithriDevaraj", repo = "savithriDevaraj.github.io")
publish(title = ' Data Products presentation with Slidify', 'index.html', host = 'rpubs')
